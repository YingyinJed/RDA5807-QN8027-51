C51 COMPILER V9.55   I2C                                                                   01/02/2021 06:05:40 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE I2C
OBJECT MODULE PLACED IN .\Objects\I2C.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE I2C\I2C.C OPTIMIZE(8,SPEED) BROWSE INCDIR(.\MAIN;.\I2C;.\QN8027;.\System
                    -;.\NUMLED) DEBUG OBJECTEXTEND PRINT(.\Listings\I2C.lst) OBJECT(.\Objects\I2C.obj)

line level    source

   1          //影隐劫（ZGT）
   2          #include <I2C.h>
   3          /*******************************************************************************
   4          * 函数名         :delay_5us()
   5          * 函数功能       :延时5us用于适应I2C中各种延时的需求
   6          * 输入           :无
   7          * 输出           :无
   8          *******************************************************************************/
   9          void delay_5us(void)
  10          {
  11   1              
  12   1      }
  13          
  14          /*******************************************************************************
  15          * 函数名         :IIC_Start()
  16          * 函数功能       :发送一个起始信号
  17          * 输入           :无
  18          * 输出           :无
  19          *******************************************************************************/
  20          void IIC_Start(void)
  21          {
  22   1          SDA = 1;        //需在SCL之前设定
  23   1          SCL = 1;        //硬件进入SDA检测状态
  24   1          delay_5us();    //延时至少4.7us
  25   1          SDA = 0;        //SDA由1->0,产生开始信号
  26   1          delay_5us();    //延时至少4us
  27   1          SCL = 0;        //SCL变为无效
  28   1      }
  29          /*******************************************************************************
  30          * 函数名         :IIC_Stop()
  31          * 函数功能       :发送一个停止信号
  32          * 输入           :无
  33          * 输出           :无
  34          *******************************************************************************/
  35          void IIC_Stop(void)
  36          {
  37   1          SDA = 0;        //在SCL之前拉低
  38   1          SCL = 1;        //硬件进入SDA检测状态
  39   1          delay_5us();    //至少延时4us
  40   1          SDA = 1;        //SDA由0->1,产生结束信号
  41   1          delay_5us();    //延时至少4.7us
  42   1      }
  43          /*******************************************************************************
  44          * 函数名         :IIC_Send_ACK(bit ack)
  45          * 函数功能       :主机向从机发送一个应答信号
  46          * 输入           :1应答；0非应答
  47          * 输出           :无
  48          *******************************************************************************/
  49          void IIC_Send_ACK(bit ack)
  50          {
  51   1          SDA = ack;      //产生应答电平
  52   1              delay_5us();
  53   1          SCL = 1;        //发送应答信号
  54   1          delay_5us();    //延时至少4us
C51 COMPILER V9.55   I2C                                                                   01/02/2021 06:05:40 PAGE 2   

  55   1          SCL = 0;        //整个期间保持应答信号
  56   1      }
  57          /*******************************************************************************
  58          * 函数名         :IIC_Get_ACK()
  59          * 函数功能       :检测从机是否应答
  60          * 输入           :无
  61          * 输出           :1非应答；0应答
  62          *******************************************************************************/
  63          bit IIC_Get_ACK(void)
  64          {
  65   1          bit ret;        //用来接收返回值
  66   1          SDA = 1;        //电阻上拉,进入读
  67   1              delay_5us();
  68   1          SCL = 1;        //进入应答检测
  69   1          delay_5us();    //至少延时4us
  70   1          ret = SDA;      //保存应答信号
  71   1          SCL = 0;
  72   1          return ret;
  73   1      }
  74          /*******************************************************************************
  75          * 函数名         :bit IIC_Write_Byte(unsigned char dat)
  76          * 函数功能       :主机发送一个字节
  77          * 输入           :需要发送的字节
  78          * 输出           :应答信号
  79          *******************************************************************************/
  80          bit IIC_Write_Byte(unsigned char dat)
  81          {
  82   1              bit ack;
  83   1          unsigned char loop = 8;     //必须为一个字节
  84   1          while(loop--){
  85   2              // 高在前低在后
  86   2                      if (dat & 0x80)
  87   2                              SDA = 1;
  88   2                      else
  89   2                              SDA = 0;
  90   2              delay_5us();
  91   2                      SCL = 1;
  92   2              delay_5us();    //延时至少4us
  93   2              SCL = 0;
  94   2              dat <<= 1;      //低位向高位移动
  95   2          }
  96   1              
  97   1              ack = IIC_Get_ACK();
  98   1              
  99   1              return ack;
 100   1      }
 101          /*******************************************************************************
 102          * 函数名         :I2C_Read_Byte(bit ack)
 103          * 函数功能       :主机通过I2C读取一个字节
 104          * 输入           :需要发送的应答信号
 105          * 输出           :读取到的字节
 106          *******************************************************************************/
 107          unsigned char IIC_Read_Byte(bit ack)
 108          {
 109   1          unsigned char loop = 8;     //必须为一个字节
 110   1          unsigned char ret = 0;
 111   1              // SDA 设置输入方向
 112   1          SDA = 1;
 113   1          while(loop--){
 114   2                      ret <<= 1;
 115   2                      SCL = 1;
 116   2                      delay_5us();
C51 COMPILER V9.55   I2C                                                                   01/02/2021 06:05:40 PAGE 3   

 117   2              // 高在前低在后
 118   2              if(SDA){
 119   3                              ret++;
 120   3                      }
 121   2              SCL = 0;
 122   2              delay_5us();
 123   2          }
 124   1              
 125   1              IIC_Send_ACK(ack);
 126   1              
 127   1          return ret;
 128   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    136    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       4
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
